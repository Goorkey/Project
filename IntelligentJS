//CTT stands for: Catch The Thief 
#include <Arduino.h>
#include "HX711.h"
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

const int LOADCELL_DOUT_PIN = 2;
const int LOADCELL_SCK_PIN = 3;
const int BUZZER_PIN = 5;
const int LCD_ADDR = 0x27;  // Adjust based on your LCD

HX711 scale;

int lastWeight = 0;
int currentWeight = 0;
String itemName = "";
int totalWeight = 0;

// Define the maximum number of items (adjust as needed)
const int MAX_ITEMS = 10;

// Define a struct to store item information
struct Item {
  String name;
  int lastWeight;
};

// Create an array to store items
Item items[MAX_ITEMS];

// Keep track of the current number of items
int itemCount = 0;

// Define a threshold for considering the weight as similar (adjust as needed)
const int WEIGHT_SIMILARITY_THRESHOLD = 1;

bool buzzerActive = false;

// LCD Configuration
const int LCD_SDA_PIN = 4;  // Analog pin 4
const int LCD_SCL_PIN = 5;  // Analog pin 5
const int LCD_COLS = 16;
const int LCD_ROWS = 2;
LiquidCrystal_I2C lcd(LCD_ADDR, LCD_COLS, LCD_ROWS);

void displayOnLCD(String line1, String line2) {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(line1);
  lcd.setCursor(0, 1);
  lcd.print(line2);
}

void setup() {
  Serial.begin(57600);
  Serial.println("CTT Demo");//acronym of Catch The Thief 

  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  pinMode(BUZZER_PIN, OUTPUT);

  lcd.init();
  lcd.backlight();
  String lcdLine1 = "   I'm Ready ";
  String lcdLine2 = "    To Work";
  displayOnLCD(lcdLine1, lcdLine2);

  scale.set_scale(-218.392);  // Updated calibration factor
  scale.tare();  // Reset the scale to 0

  Serial.println("I'm ready to work:");
}

void loop() {
  delay(5000);  // Changed delay to 4 seconds

  currentWeight = scale.get_units(1);  // Update currentWeight with the latest reading

  // Check if the stop command is received
  if (Serial.available() > 0) {
    String command = Serial.readStringUntil('\n');
    if (command == "stop") {
      // Stop the buzzer
      digitalWrite(BUZZER_PIN, LOW);
      buzzerActive = false;
      Serial.println("Program stopped.");
      return;  // Exit the loop
    }
  }

  // Calculate the weight change every time something is added or removed
  int weightChange = currentWeight - lastWeight;

  // Check if the weight change is positive (item added)
  if (weightChange > 0 && weightChange >= 2) {
    itemName = "Unknown Item";

    // Check if the added weight is similar to the previous weight
    if (itemCount > 0 && abs(currentWeight - items[itemCount - 1].lastWeight) <= WEIGHT_SIMILARITY_THRESHOLD) {
      // Assign the same name as the previous item
      itemName = items[itemCount - 1].name;
      Serial.print("Added Item is: ");
      Serial.println(itemName);
    } else {
      // Calculate the absolute difference between weight change and every item's weight before
      for (int i = 0; i < itemCount; i++) {
        int difference = abs(weightChange - items[i].lastWeight);
        if (difference < 2) {
          itemName = items[i].name;
          Serial.print("Added Item is: ");
          Serial.println(itemName);
          break;
        }
      }

      // If no similar item is found, prompt user for the name of the item
      if (itemName == "Unknown Item") {
        Serial.print("Enter the name of the item: ");
        while (!Serial.available()) {
          // Wait for user input
        }

        // Read the user input
        itemName = Serial.readString();
      }
    }

    // Store the new item in the array
    if (itemCount < MAX_ITEMS) {
      items[itemCount].name = itemName;
      items[itemCount].lastWeight = weightChange;  // Store the weightChange as last recorded weight
      itemCount++;
      Serial.print("Item Name: ");
      Serial.println(itemName);

      // Display the total weight and weight of the added item on LCD
      
      totalWeight += weightChange;
      String lcdLine1 = itemName + ": " + String(weightChange) + "g";
      String lcdLine2 = "Total: " + String(totalWeight)+ "g";
      displayOnLCD(lcdLine1, lcdLine2);

      Serial.print("Total Weight: ");
      Serial.println(totalWeight);
      Serial.print(itemName);
      Serial.print(" Weight: ");
      Serial.println(weightChange);

      // ...

      // Check if total weight is 0 and there are more than 1 item
      if (totalWeight <= 0 && itemCount > 1 && !buzzerActive) {
        // Start the buzzer
        digitalWrite(BUZZER_PIN, HIGH);
        buzzerActive = true;
        Serial.println("Buzzer activated!");

        // Display "Catch The Thief" on LCD
        String lcdLine1 = "Catch The Thief!";
        String lcdLine2 = "";
        displayOnLCD(lcdLine1, lcdLine2);
      }
    } else {
      Serial.println("Maximum number of items reached.");
    }
  }

  // Check if the weight change is negative (item removed)
  if (weightChange < 0) {
    // Iterate through the array to find the removed item
    for (int i = 0; i < itemCount; i++) {
      // Calculate the absolute difference between the weight change and the item's weight change
      int itemWeightChange = abs(weightChange + items[i].lastWeight);

      // Set a threshold for considering it a match (adjust as needed)
      if (itemWeightChange < 3) {
        Serial.print("Removed Item: ");
        Serial.println(items[i].name);

        // Display the new total weight after removing the item on LCD
        totalWeight -= items[i].lastWeight;
        String lcdLine1 = "Removed " + items[i].name;
        String lcdLine2 = "T: " + String(totalWeight);
        displayOnLCD(lcdLine1, lcdLine2);

        Serial.print("New Total Weight: ");
        Serial.println(totalWeight);

        // Check if total weight is 0 and there are more than 1 item
        if (totalWeight == 0 && itemCount > 1 && !buzzerActive) {
          // Start the buzzer
          digitalWrite(BUZZER_PIN, HIGH);
          buzzerActive = true;
          Serial.println("Buzzer activated!");

          // Display "Catch The Thief" on LCD
          String lcdLine1 = "Catch The Thief!";
          String lcdLine2 = "";
          displayOnLCD(lcdLine1, lcdLine2);
        }

        break;  // Break out of the loop once a match is found
      }
    }
  }

  lastWeight = currentWeight;  // Update lastWeight to currentWeight
}
